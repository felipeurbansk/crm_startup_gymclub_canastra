package controller;
// Generated 04/10/2017 16:18:01 by Hibernate Tools 4.3.1


import java.util.Date;
import dao.DAOSistema;
import controller.Movimento;
import java.text.SimpleDateFormat;
import java.util.HashMap;

import org.hibernate.Session;
import org.hibernate.Query;
import java.util.Iterator;
import java.util.List;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;
/**
 * Contapagar generated by hbm2java
 */
public class Contapagar  implements java.io.Serializable {

     private Integer contaPagarId;
     private Caixa caixa;
     private Fornecedor fornecedor;
     private Transacao transacao;
     public Date dataVencimento;
     private Date dataEmissao;
     private float valor;
     private float desconto;
     private int parcela;
     private float multa;
     private float total;
     private String numeroDoc;
     private Movimento movimento;
     private Criteria c = null;
     
     private SimpleDateFormat dataBanco = new SimpleDateFormat("yyyy-MM-dd");
     private SimpleDateFormat dataExibicao = new SimpleDateFormat("dd/MM/YYYY");


     public String[] getContaPagar(){
         return new String[]{
           String.valueOf(this.contaPagarId),
             String.valueOf(this.fornecedor.getRazao()),
             String.valueOf(dataExibicao.format(this.dataVencimento)),
             String.valueOf(this.fornecedor.getCnpj()),
             String.valueOf("R$"+this.total)
         };
     }
     
    public String[] getContaPagarPago(){
         return new String[]{
           String.valueOf(this.contaPagarId),
             String.valueOf(this.fornecedor.getRazao()),
             String.valueOf(dataExibicao.format(this.dataVencimento)),
             String.valueOf(this.fornecedor.getCnpj()),
             String.valueOf("R$"+this.total),
             String.valueOf(dataExibicao.format(this.getTransacao().getData()))
         };
     }
    
    public String[] getContaPagar_Caixa(){
        return new String[]{
            String.valueOf(transacao.getTransacaoId()),
            String.valueOf(dataExibicao.format(this.getTransacao().getData())),
            String.valueOf(transacao.getDescricao()),
            "SAÍDA",
            String.valueOf("R$"+this.total)
        };
    }
    
    public Contapagar(){
        
    }
    public Contapagar(Fornecedor fornecedor, Date dataVencimento, Date dataEmissao, float valor, float desconto, int parcela, float multa, String numeroDoc) {
       this.fornecedor = fornecedor;
       this.dataVencimento = dataVencimento;
       this.dataEmissao = dataEmissao;
       this.valor = valor;
       this.desconto = desconto;
       this.parcela = parcela;
       this.multa = multa;
       this.numeroDoc = numeroDoc;
       this.somarTotal();
    }
   
    public Integer getContaPagarId() {
        return this.contaPagarId;
    }
    
    public void setContaPagarId(Integer contaPagarId) {
        this.contaPagarId = contaPagarId;
    }
    
    public void setCaixa(Caixa caixa){
        this.caixa = caixa;
    }
    
    public Caixa getCaixa(){
        return this.caixa;
    }
    
    public Fornecedor getFornecedor() {
        return this.fornecedor;
    }
    
    public void setFornecedor(Fornecedor fornecedor) {
        this.fornecedor = fornecedor;
    }
    public Transacao getTransacao() {
        return this.transacao;
    }
    
    public void setTransacao(Transacao transacao) {
        this.transacao = transacao;
    }
    public Date getDataVencimento() {
        return this.dataVencimento;
    }
    
    public void setDataVencimento(Date dataVencimento) {
        this.dataVencimento = dataVencimento;
    }
    public Date getDataEmissao() {
        return this.dataEmissao;
    }
    
    public void setDataEmissao(Date dataEmissao) {
        this.dataEmissao = dataEmissao;
    }
    public float getValor() {
        return this.valor;
    }
    
    public void setValor(float valor) {
        this.valor = valor;
    }
    public float getDesconto() {
        return this.desconto;
    }
    
    public void setDesconto(float desconto) {
        this.desconto = desconto;
    }
    public int getParcela() {
        return this.parcela;
    }
    
    public void setParcela(int parcela) {
        this.parcela = parcela;
    }
    public float getMulta() {
        return this.multa;
    }
    
    public void setMulta(float multa) {
        this.multa = multa;
    }
    public float getTotal() {
        return this.total;
    }
    
    public void setTotal(float total) {
        this.total = total;
    }

    public String getNumeroDoc() {
        return this.numeroDoc;
    }
    
    public void setNumeroDoc(String numeroDoc) {
        this.numeroDoc = numeroDoc;
    }
    
    public void cadastraContaPagar(Contapagar conta){
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            s.save(conta);
            s.getTransaction().commit();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }

    public void somarTotal(){
        this.total = (this.valor + this.multa) - this.desconto;
    }
    
    public Iterator retornaContaPagar(String pesquisa,int filtro, int tipoConsulta){
        
        String sql = "from Contapagar c";
        
        //Date dataAtual = new Date(System.currentTimeMillis());
        
        if(tipoConsulta >= 0){
            switch(tipoConsulta){
                case 0:
                    //Contas a pagar não vencidas
                    sql += " where c.transacao.situacao.situacaoId  = '6'";
                    break;
                case 1:
                    //Contas a pagar vencidas
                    sql += " where c.transacao.situacao.situacaoId  = '1' ";
                    break;
                case 2:
                    // Contas a pagar Pagas
                    sql += " where c.transacao.situacao.situacaoId  = '2' ";
                    break;
                case 3:
                    break;
            }
            
        }
        
        if(pesquisa != null){
            switch(filtro){
                case 0:
                    //Contas a pagar por id
                    sql += " and c.contaPagarId = '"+pesquisa+"'";
                    break;
                case 1:
                    //Contas a pagar por nome beneficiario
                    sql += " and c.fornecedor.pessoa.nome LIKE '%"+pesquisa+"%'";
                    break;
                case 2:
                    //Contas a pagar por cnpj
                    sql  += " and c.fornecedor.cnpj LIKE '%"+pesquisa+"%'";
                    break;
                    
                case 3:
                    //Conta a pagar por valor
                    sql += " and c.valor LIKE '%"+pesquisa+"%'";
                    break;

            }
        }
        
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l = q.list();
            Iterator i = l.iterator();
            s.getTransaction().commit();
            return i;
        }catch(Exception ex){
            ex.printStackTrace();
        }
            return null;
    }
    
    public Iterator retornaContaPagarCaixa(int caixaId){
       String sql = "from Contapagar where caixa.caixaId = '"+caixaId+"'";
       try{
           Session s = DAOSistema.getSessionFactory().openSession();
           s.beginTransaction();
           Query q = s.createQuery(sql);
           List l = q.list();
           Iterator i = l.iterator();
           s.getTransaction().commit();
           return i;
       }catch(Exception ex){
           ex.printStackTrace();
       }
       return null;
    }
    
    
    
    public Contapagar retornaContaPagar(int contaPagarId){
        String sql = "from Contapagar where contaPagarId = '"+contaPagarId+"'";
        
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l =  q.list();
            Iterator i = l.iterator();
            Contapagar c;
            if(i.hasNext()){
                c = (Contapagar)i.next();
                return c;
            }
            s.getTransaction().commit();
        }catch(Exception ex){
            ex.printStackTrace();
           
        }
        return null;
    }
    
    public boolean atualizarSituacaoContaPagar(Contapagar conta, int situacaoId){
        String sql = "update Transacao t set t.situacao.situacaoId = '"+situacaoId+"', t.data = CURRENT_TIMESTAMP where t.transacaoId = '"+conta.getTransacao().getTransacaoId()+"'";
        
        try{
            Session s = DAOSistema.getSessionFactory().getCurrentSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            q.executeUpdate();
            s.getTransaction().commit();
            return true;
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return false;
    }
    
    /*
        Verifica se existe alguma conta a pagar referente ao fornecedorId informado para que se não exista nenhuma conta
        ele possa ser excluido.
    */
    public boolean verificaExistenciaContaFornecedor(int fornecedorId){
        String sql = "from Contapagar c where c.fornecedor.fornecedorId = '"+fornecedorId+"'";
        
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l = q.list();
            Iterator i = l.iterator();
            
            if(i.hasNext()){
                return true;
            }
        }catch(Exception ex){
            ex.printStackTrace();
            
        }
        return false;
    }
    
    public boolean atualizaCaixa(int contaPagarId, int caixaId){
        String sql = "update Contapagar set caixa.caixaId = '"+caixaId+"' where contaPagarId = '"+contaPagarId+"'";
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            q.executeUpdate();
            s.getTransaction().commit();
        }catch(Exception ex){
            ex.printStackTrace();
        }
        
        return false;
    }
    
    public void gerarRelatorio(String sql){
        String arquivo = "src/relatorios/report_contaPagar.jasper";
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l = q.list();
  
            JRBeanCollectionDataSource dados = new JRBeanCollectionDataSource(l);
            JasperPrint jp = JasperFillManager.fillReport(arquivo, new HashMap(),dados);

            JasperViewer.viewReport(jp, false);
            s.getTransaction().commit();
            
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
}


