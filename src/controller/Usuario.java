package controller;
// Generated 04/10/2017 16:18:01 by Hibernate Tools 4.3.1


import dao.DAOSistema;

import java.text.SimpleDateFormat;

import org.hibernate.Session;
import org.hibernate.Query;

import java.util.List;
import java.util.Iterator;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * Usuario generated by hbm2java
 */
public class Usuario  implements java.io.Serializable {


     private Integer usuarioId;
     private String login;
     private String senha;
     private Nivelacesso nivelacesso;
     private Pessoa pessoa;
     private char sexo;
     private Date dataNasc;
     private String cpf;
     private String rg;
     private Date dataConta;
     private Set acessos = new HashSet(0);
     private Set caixas = new HashSet(0);
     
     private SimpleDateFormat dataBanco = new SimpleDateFormat("yyyy-MM-dd");
     private SimpleDateFormat dataExibicao = new SimpleDateFormat("dd/MM/YYYY");
     /* Select
        "FROM Usuario as u INNER JOIN u.pessoa as p WHERE p.pessoaId = Pessoa.pessoaId"
     */

     public String[] getUsuario(){
         return new String[]{
           String.valueOf(this.usuarioId),
             pessoa.getNome(),
             String.valueOf(this.cpf.substring(0, 3)+"."+this.cpf.substring(3, 6)+"."+this.cpf.substring(6, 9)+"-"+this.cpf.substring(9)),
             this.login,
             String.valueOf(dataExibicao.format(this.dataConta))
             
         };
     }
    public Usuario() {
    }

	
    public Usuario(Nivelacesso nivelacesso, String login, String senha, Pessoa pessoa, char sexo, Date dataNasc, String cpf, String rg) {
        this.nivelacesso = nivelacesso;
        this.login = login;
        this.senha = senha;
        this.pessoa = pessoa;
        this.sexo = sexo;
        this.dataNasc = dataNasc;
        this.cpf = cpf;
        this.rg = rg;
    }
    public Usuario(Nivelacesso nivelacesso,String login, String senha, Pessoa pessoa, char sexo, Date dataNasc, String cpf, String rg, Date dataConta, Set acessos, Set caixas) {
       this.nivelacesso = nivelacesso;
       this.login = login;
       this.senha = senha;
       this.pessoa = pessoa;
       this.sexo = sexo;
       this.dataNasc = dataNasc;
       this.cpf = cpf;
       this.rg = rg;
       this.dataConta = dataConta;
       this.acessos = acessos;
       this.caixas = caixas;
    }
   
    public Integer getUsuarioId() {
        return this.usuarioId;
    }
    
    public void setUsuarioId(Integer usuarioId) {
        this.usuarioId = usuarioId;
    }
    public Nivelacesso getNivelacesso() {
        return this.nivelacesso;
    }
    
    public void setNivelacesso(Nivelacesso nivelacesso) {
        this.nivelacesso = nivelacesso;
    }
    
    public String getLogin(){
        return this.login;
    }
    public void setLogin(String login){
        this.login = login;
    }
    
    public String getSenha(){
        return this.senha;
    }
    
    public void setSenha(String senha){
        this.senha = senha;
    }
    public Pessoa getPessoa() {
        return this.pessoa;
    }
    
    public void setPessoa(Pessoa pessoa) {
        this.pessoa = pessoa;
    }
    public char getSexo() {
        return this.sexo;
    }
    
    public void setSexo(char sexo) {
        this.sexo = sexo;
    }
    public Date getDataNasc() {
        return this.dataNasc;
    }
    
    public void setDataNasc(Date dataNasc) {
        this.dataNasc = dataNasc;
    }
    public String getCpf() {
        return this.cpf;
    }
    
    public void setCpf(String cpf) {
        this.cpf = cpf;
    }
    public String getRg() {
        return this.rg;
    }
    
    public void setRg(String rg) {
        this.rg = rg;
    }
    public Date getDataConta() {
        return this.dataConta;
    }
    
    public void setDataConta(Date dataConta) {
        this.dataConta = dataConta;
    }
    public Set getAcessos() {
        return this.acessos;
    }
    
    public void setAcessos(Set acessos) {
        this.acessos = acessos;
    }
    public Set getCaixas() {
        return this.caixas;
    }
    
    public void setCaixas(Set caixas) {
        this.caixas = caixas;
    }
    
    public boolean cadastraUsuario(Usuario usuario){
        
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            s.save(usuario);
            s.getTransaction().commit();
            return true;
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return false;
    }
    
    public boolean validaLogin(String login){
        String sql = "from Usuario where login = '"+login+"'";
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l = q.list();
            Iterator i = l.iterator();
            s.getTransaction().commit();
            if(i.hasNext()){
                return true;
            }
            
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return false;
    }
    
    public Usuario validaLogin(String login, String senha){
        String sql = "from Usuario where login = '"+login+"' and senha = '"+senha+"'";
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l = q.list();
            Iterator i = l.iterator();
            s.getTransaction().commit();
            
            Usuario usuario = null;
            if(i.hasNext()){
                usuario = (Usuario)i.next();
                return usuario;
            }
            s.getTransaction().commit();
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return null;
    }
    
    public Iterator retornaUsuario(){
        String sql = "from Usuario";
        
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l = q.list();
            Iterator i = l.iterator();
            s.getTransaction().commit();
            return i;
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return null;
    }
    
    public Usuario retornaUsuario(int usuarioId){
        String sql = "from Usuario where usuarioId = '"+usuarioId+"'";
        
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l = q.list();
            Iterator i = l.iterator();
            Usuario usuario;
            s.getTransaction().commit();
            if(i.hasNext()){
                usuario = (Usuario)i.next();
                return usuario;
            }
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return null;
    }
    
    public Iterator  retornaUsuario(String valor, int filtro){
        String sql = "from Usuario ";
        switch(filtro){
            case 0:
                sql += "where usuarioId LIKE '%"+valor+"%'";
                break;
            case 1:
                sql += "where pessoa.nome LIKE '%"+valor+"%'";
                break;
            case 2:
                sql += "where cpf LIKE '%"+valor+"%'";
                break;
            case 3:
                sql += "where login LIKE '%"+valor+"%'";
                break;
        }
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l = q.list();
            Iterator i = l.iterator();
            s.getTransaction().commit();
            return i;
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return null;
    }
    
    public boolean excluirUsuario(Usuario usuario){
        String sql = "delete Usuario where usuarioId = '"+usuario.getUsuarioId()+"'";
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            q.executeUpdate();
            s.getTransaction().commit();
            return true;
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return false;
    }
    
    public boolean verificaIntegridade(Usuario usuario){
        String sql = "from Acesso where usuario.usuarioId = '"+usuario.getUsuarioId()+"'";
        
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l = q.list();
            Iterator i = l.iterator();
            
            if(i.hasNext()){
                s.getTransaction().commit();
                return true;
            }
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return false;
    }
        
    public boolean alterarSenha(Usuario usuario){
        
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            s.merge(usuario);
            s.getTransaction().commit();
            return true;
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return false;
    }
    
    public boolean verificaCpf(String cpf){
      
        String sql = "from Usuario where cpf = '"+cpf+"'";
        
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l = q.list();
            Iterator i = l.iterator();
            
            if(i.hasNext()){
                return false;
            }
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return true;
    }

}


