package controller;
// Generated 04/10/2017 16:18:01 by Hibernate Tools 4.3.1


import dao.DAOSistema;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 * Fornecedor generated by hbm2java
 */
public class Fornecedor  implements java.io.Serializable {

     private Integer fornecedorId;
     private Pessoa pessoa;
     private String razao;
     private String cnpj;
     private String ramo;
     private Set contarecebers = new HashSet(0);
     private Set contapagars = new HashSet(0);

    public String[] getFornecedor(){
        return new String[]{
             String.valueOf(this.fornecedorId),
             this.razao.toUpperCase(),
             this.pessoa.getNome().toUpperCase(),
             this.cnpj,
             this.pessoa.getTelFixo(),
             this.pessoa.getEmail()
         };
     }
    public Fornecedor() {
    }

	
    public Fornecedor(Pessoa pessoa, String razao, String cnpj, String ramo) {
        this.pessoa = pessoa;
        this.razao = razao.toUpperCase();
        this.cnpj = cnpj;
        this.ramo = ramo.toUpperCase();
    }
    public Fornecedor(Pessoa pessoa, String razao, String cnpj, String ramo, Set contarecebers, Set contapagars) {
       this.pessoa = pessoa;
       this.razao = razao;
       this.cnpj = cnpj;
       this.ramo = ramo;
       this.contarecebers = contarecebers;
       this.contapagars = contapagars;
    }
   
    public Integer getFornecedorId() {
        return this.fornecedorId;
    }
    
    public void setFornecedorId(Integer fornecedorId) {
        this.fornecedorId = fornecedorId;
    }
    public Pessoa getPessoa() {
        return this.pessoa;
    }
    
    public void setPessoa(Pessoa pessoa) {
        this.pessoa = pessoa;
    }
    public String getRazao() {
        return this.razao;
    }
    
    public void setRazao(String razao) {
        this.razao = razao;
    }
    public String getCnpj() {
        return this.cnpj;
    }
    
    public void setCnpj(String cnpj) {
        this.cnpj = cnpj;
    }
    public String getRamo() {
        return this.ramo;
    }
    
    public void setRamo(String ramo) {
        this.ramo = ramo;
    }
    public Set getContarecebers() {
        return this.contarecebers;
    }
    
    public void setContarecebers(Set contarecebers) {
        this.contarecebers = contarecebers;
    }
    public Set getContapagars() {
        return this.contapagars;
    }
    
    public void setContapagars(Set contapagars) {
        this.contapagars = contapagars;
    }

    public void cadastraFornecedor(Fornecedor fornecedor){
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            s.save(fornecedor);
            s.getTransaction().commit();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    public Iterator retornaFornecedores(String valor, int filtro){
        String sql = "from Fornecedor";
        
        if(valor != null){
            sql += " where ";
            
            switch(filtro){
                case 0:
                    sql += " fornecedorId = '"+valor+"'";
                    break;
                case 1:
                    sql += " razao like '%"+valor+"%'";
                    break;
                case 2:
                    sql += " pessoa.nome like '%"+valor+"%'";
                    break;
                case 3:
                    sql += " cnpj like '%"+valor+"%'";
                    break;
                    
            }
        }
        
         try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l = q.list();
            Iterator i = l.iterator();
            s.getTransaction().commit();
            return i;
        }catch(Exception ex){
            ex.printStackTrace();
        }
         return null;
    }
    public Fornecedor retornaFornecedor(int fornecedorId){
        String sql = "from Fornecedor where fornecedorId='"+fornecedorId+"'";
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l = q.list();
            Iterator i = l.iterator();
            Fornecedor f;
            if(i.hasNext()){
                f = (Fornecedor)i.next();
                s.getTransaction().commit();
                return f;
            }
            
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return null;
    }
    
    public void excluirFornecedor(Fornecedor f){
        Fornecedor del = new Fornecedor(f.getPessoa(), "", "", "");
        del.setFornecedorId(f.fornecedorId);
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            s.delete(del);
            s.getTransaction().commit();
        }catch(Exception ex){
            ex.printStackTrace();
        }
        
    }
    
    public void alterarFornecedor(Fornecedor f){
        try{
            pessoa.alteraPessoa(f.getPessoa());
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            s.merge(f);
            s.getTransaction().commit();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
   
    /*
        Verifica se existe alguma conta a pagar referente ao fornecedorId informado para que se n√£o exista nenhuma conta
        ele possa ser excluido.
    */
    public boolean verificaExistenciaContaFornecedor(int fornecedorId){
        String sql = "from Contapagar c where c.fornecedor.fornecedorId = '"+fornecedorId+"'";
        
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l = q.list();
            Iterator i = l.iterator();
            
            if(i.hasNext()){
                s.getTransaction().commit();
                return true;
            }
        }catch(Exception ex){
            ex.printStackTrace();
            
        }
        return false;
    }
    
    public void populaRelatorio(){
        String sql = "from Fornecedor";
        String arquivo = "src/relatorios/report_fornecedor.jasper";
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l = q.list();
            s.getTransaction().commit();
            JRBeanCollectionDataSource dados = new JRBeanCollectionDataSource(l);
            JasperPrint jp = JasperFillManager.fillReport(arquivo, new HashMap(),dados);
            
            JasperViewer.viewReport(jp, false);
            
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    public boolean verificaCnpj(String cnpj){
      
        String sql = "from Fornecedor where cnpj = '"+cnpj+"'";
        
        try{
            Session s = DAOSistema.getSessionFactory().openSession();
            s.beginTransaction();
            Query q = s.createQuery(sql);
            List l = q.list();
            Iterator i = l.iterator();
            
            if(i.hasNext()){
                return false;
            }
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return true;
    }
}


